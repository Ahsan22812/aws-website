# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- new-features

pool:
  vmImage: ubuntu-latest

stages:
 - stage: tfvalidate
   jobs:
    - job: validate
      continueOnError: false
      steps:
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: 'latest'

        - task: TerraformTaskV4@4
          inputs:
            provider: 'aws'
            command: 'init'
            backendServiceAWS: 'AWS-Terraform'
            backendAWSBucketName: 'terraform-aws-bucket-01'
            backendAWSKey: 'tf/terraform.tfstate'
          
        - task: TerraformTaskV4@4
          inputs:
            provider: 'aws'
            command: 'validate'


 - stage: tfdeploy
   condition: succeeded('tfvalidate')
   dependsOn: tfvalidate
   jobs:
     - job: apply
       steps:

        - task: TerraformInstaller@1
          inputs:
            terraformVersion: 'latest'

        - task: TerraformTaskV4@4
          inputs:
            provider: 'aws'
            command: 'init'
            backendServiceAWS: 'AWS-Terraform'
            backendAWSBucketName: 'terraform-aws-bucket-01'
            backendAWSKey: 'tf/terraform.tfstate'

        - task: TerraformTaskV4@4
          inputs:
            provider: 'aws'
            command: 'plan'
            environmentServiceNameAWS: 'AWS-Terraform'
   
        - task: TerraformTaskV4@4
          inputs:
            provider: 'aws'
            command: 'apply'
            environmentServiceNameAWS: 'AWS-Terraform'